{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cleanbooker Documentation Executive Summary CleanBooker is a modern web application developed to support KleenScape, enabling customers to seamlessly schedule professional cleaning services online. Designed with both convenience and scalability in mind, the platform streamlines the entire booking and payment process while offering a admin dashboard for managing appointments, tracking revenue, and analyzing customer trends. Optimized for both mobile and desktop use, CleanBooker features a responsive and intuitive user interface, ensuring a smooth experience across devices. The platform is targeted towards two primary audiences: Customers (residential and commercial building owners) seeking reliable, on-demand cleaning services. KleenScape administrators, who require real-time insights into business operations through an integrated dashboard that summarizes key metrics such as appointment volume, service types, and customer data. By connecting clients and providers through a single, user-friendly platform, CleanBooker enhances service delivery, simplifies internal workflows, and positions KleenScape for future growth in the digital space. Developers: Sheikh Safwan Hossain sakifhossain71@gmail.com Product Owners: Hasibul Islam hasib_oni@yahoo.com Kaizer Rafid Islam kaizerrafid@gmail.com","title":"Cleanbooker Documentation"},{"location":"#cleanbooker-documentation","text":"","title":"Cleanbooker Documentation"},{"location":"#executive-summary","text":"CleanBooker is a modern web application developed to support KleenScape, enabling customers to seamlessly schedule professional cleaning services online. Designed with both convenience and scalability in mind, the platform streamlines the entire booking and payment process while offering a admin dashboard for managing appointments, tracking revenue, and analyzing customer trends. Optimized for both mobile and desktop use, CleanBooker features a responsive and intuitive user interface, ensuring a smooth experience across devices. The platform is targeted towards two primary audiences: Customers (residential and commercial building owners) seeking reliable, on-demand cleaning services. KleenScape administrators, who require real-time insights into business operations through an integrated dashboard that summarizes key metrics such as appointment volume, service types, and customer data. By connecting clients and providers through a single, user-friendly platform, CleanBooker enhances service delivery, simplifies internal workflows, and positions KleenScape for future growth in the digital space. Developers: Sheikh Safwan Hossain sakifhossain71@gmail.com Product Owners: Hasibul Islam hasib_oni@yahoo.com Kaizer Rafid Islam kaizerrafid@gmail.com","title":"Executive Summary"},{"location":"api_doc/","text":"Cleaning Service CRM & Advertising API Documentation Overview This API serves a web application designed for cleaning service businesses to manage customer relationships, bookings, and advertising campaigns. Base URL https://api.cleanbooker.com/v1 Authentication All authenticated endpoints require a Bearer token in the Authorization header: Authorization: Bearer <jwt_token> Response Format All responses follow this structure: { \"success\": boolean, \"data\": object | array | null, \"message\": string, \"errors\": array | null, \"meta\": { \"timestamp\": \"ISO 8601 datetime\", \"requestId\": \"unique_request_id\" } } 1. Authentication Endpoints POST /auth/register Register a new business account { \"businessName\": \"string (required)\", \"ownerName\": \"string (required)\", \"email\": \"string (required, unique)\", \"password\": \"string (required, min 8 chars)\", \"phone\": \"string (required)\", \"address\": { \"street\": \"string (required)\", \"city\": \"string (required)\", \"state\": \"string (required)\", \"zipCode\": \"string (required)\", \"country\": \"string (default: US)\" }, \"serviceArea\": [\"string\"] // Array of zip codes or city names } Response: { \"success\": true, \"data\": { \"user\": { \"id\": \"uuid\", \"businessName\": \"string\", \"email\": \"string\", \"role\": \"admin\", \"isVerified\": false }, \"token\": \"jwt_token\", \"refreshToken\": \"refresh_token\" } } POST /auth/login Login to existing account { \"email\": \"string (required)\", \"password\": \"string (required)\" } POST /auth/refresh Refresh access token { \"refreshToken\": \"string (required)\" } POST /auth/logout Logout and invalidate tokens { \"refreshToken\": \"string (required)\" } POST /auth/forgot-password Request password reset { \"email\": \"string (required)\" } POST /auth/reset-password Reset password with token { \"token\": \"string (required)\", \"newPassword\": \"string (required)\" } 2. User Management GET /users/profile Get current user profile PUT /users/profile Update user profile { \"businessName\": \"string\", \"ownerName\": \"string\", \"phone\": \"string\", \"address\": { \"street\": \"string\", \"city\": \"string\", \"state\": \"string\", \"zipCode\": \"string\" }, \"serviceArea\": [\"string\"], \"businessHours\": { \"monday\": { \"open\": \"09:00\", \"close\": \"17:00\", \"closed\": false }, \"tuesday\": { \"open\": \"09:00\", \"close\": \"17:00\", \"closed\": false } // ... other days } } POST /users/upload-avatar Upload business logo/avatar Multipart form data with image file 3. Customer Management (CRM) GET /customers Get customers list with pagination and filters Query Parameters: page : number (default: 1) limit : number (default: 20, max: 100) search : string (search by name, email, phone) status : enum (active, inactive, potential) sortBy : enum (name, email, createdAt, lastService) sortOrder : enum (asc, desc) POST /customers Create new customer { \"firstName\": \"string (required)\", \"lastName\": \"string (required)\", \"email\": \"string (required)\", \"phone\": \"string (required)\", \"address\": { \"street\": \"string (required)\", \"city\": \"string (required)\", \"state\": \"string (required)\", \"zipCode\": \"string (required)\" }, \"propertyType\": \"enum (house, apartment, office, commercial)\", \"propertySize\": \"number\", // square feet \"specialInstructions\": \"string\", \"preferredContactMethod\": \"enum (email, phone, sms)\", \"status\": \"enum (potential, active, inactive)\" } GET /customers/:id Get customer details PUT /customers/:id Update customer information DELETE /customers/:id Delete customer (soft delete) GET /customers/:id/bookings Get customer's booking history GET /customers/:id/notes Get customer notes POST /customers/:id/notes Add customer note { \"content\": \"string (required)\", \"type\": \"enum (general, service, complaint, compliment)\" } 4. Services Management GET /services Get available services POST /services Create new service { \"name\": \"string (required)\", \"description\": \"string\", \"basePrice\": \"number (required)\", \"duration\": \"number (required)\", // minutes \"category\": \"enum (regular, deep, move-in, move-out, commercial)\", \"addOns\": [ { \"name\": \"string\", \"price\": \"number\", \"duration\": \"number\" } ], \"isActive\": \"boolean (default: true)\" } PUT /services/:id Update service DELETE /services/:id Delete service 5. Booking Management GET /bookings Get bookings with filters Query Parameters: page , limit : pagination status : enum (pending, confirmed, in-progress, completed, cancelled) date : ISO date (filter by specific date) dateRange : object { \"start\": \"ISO date\", \"end\": \"ISO date\" } customerId : uuid serviceId : uuid POST /bookings Create new booking { \"customerId\": \"uuid (required)\", \"serviceId\": \"uuid (required)\", \"scheduledDate\": \"ISO datetime (required)\", \"estimatedDuration\": \"number (required)\", // minutes \"address\": { \"street\": \"string (required)\", \"city\": \"string (required)\", \"state\": \"string (required)\", \"zipCode\": \"string (required)\" }, \"addOns\": [\"uuid\"], // array of add-on service IDs \"specialInstructions\": \"string\", \"totalPrice\": \"number (required)\", \"paymentMethod\": \"enum (cash, card, check, online)\", \"recurringType\": \"enum (none, weekly, biweekly, monthly)\", \"recurringEndDate\": \"ISO date\" // if recurring } GET /bookings/:id Get booking details PUT /bookings/:id Update booking PUT /bookings/:id/status Update booking status { \"status\": \"enum (confirmed, in-progress, completed, cancelled)\", \"notes\": \"string\" } POST /bookings/public Public booking endpoint (for website booking form) { \"customer\": { \"firstName\": \"string (required)\", \"lastName\": \"string (required)\", \"email\": \"string (required)\", \"phone\": \"string (required)\", \"address\": { \"street\": \"string (required)\", \"city\": \"string (required)\", \"state\": \"string (required)\", \"zipCode\": \"string (required)\" } }, \"serviceId\": \"uuid (required)\", \"preferredDate\": \"ISO date (required)\", \"preferredTime\": \"string (required)\", // HH:MM format \"alternativeDate\": \"ISO date\", \"alternativeTime\": \"string\", \"addOns\": [\"uuid\"], \"specialInstructions\": \"string\", \"propertyType\": \"enum (house, apartment, office, commercial)\", \"propertySize\": \"number\", \"howDidYouHear\": \"string\" } 6. Calendar & Scheduling GET /calendar/availability Check availability for booking Query Parameters: date : ISO date (required) serviceId : uuid (required) duration : number (required, in minutes) Response: { \"success\": true, \"data\": { \"availableSlots\": [ { \"startTime\": \"HH:MM\", \"endTime\": \"HH:MM\" } ] } } GET /calendar/events Get calendar events for dashboard Query Parameters: start : ISO date end : ISO date 7. Analytics & Reports GET /analytics/dashboard Get dashboard analytics { \"period\": \"enum (today, week, month, quarter, year, custom)\", \"startDate\": \"ISO date\", // required if period is custom \"endDate\": \"ISO date\" // required if period is custom } Response: { \"success\": true, \"data\": { \"totalRevenue\": \"number\", \"totalBookings\": \"number\", \"completedServices\": \"number\", \"newCustomers\": \"number\", \"customerRetentionRate\": \"number\", \"averageBookingValue\": \"number\", \"popularServices\": [ { \"serviceId\": \"uuid\", \"serviceName\": \"string\", \"bookingCount\": \"number\", \"revenue\": \"number\" } ], \"revenueByMonth\": [ { \"month\": \"YYYY-MM\", \"revenue\": \"number\", \"bookings\": \"number\" } ], \"bookingStatusBreakdown\": { \"pending\": \"number\", \"confirmed\": \"number\", \"completed\": \"number\", \"cancelled\": \"number\" } } } GET /analytics/revenue Get detailed revenue analytics GET /analytics/customers Get customer analytics GET /analytics/services Get service performance analytics 8. Marketing & Advertising GET /marketing/campaigns Get advertising campaigns POST /marketing/campaigns Create new campaign { \"name\": \"string (required)\", \"type\": \"enum (google-ads, facebook, email, sms)\", \"budget\": \"number\", \"startDate\": \"ISO date (required)\", \"endDate\": \"ISO date\", \"targetAudience\": { \"ageRange\": { \"min\": \"number\", \"max\": \"number\" }, \"locations\": [\"string\"], \"interests\": [\"string\"] }, \"adContent\": { \"headline\": \"string\", \"description\": \"string\", \"imageUrl\": \"string\", \"callToAction\": \"string\" }, \"isActive\": \"boolean\" } GET /marketing/leads Get marketing leads POST /marketing/leads Convert lead to customer { \"leadId\": \"uuid (required)\", \"customerId\": \"uuid (required)\" } 9. Notifications GET /notifications Get user notifications PUT /notifications/:id/read Mark notification as read POST /notifications/preferences Update notification preferences { \"emailNotifications\": { \"newBookings\": \"boolean\", \"cancellations\": \"boolean\", \"payments\": \"boolean\", \"reviews\": \"boolean\" }, \"smsNotifications\": { \"appointmentReminders\": \"boolean\", \"statusUpdates\": \"boolean\" }, \"pushNotifications\": { \"enabled\": \"boolean\" } } 10. Reviews & Feedback GET /reviews Get customer reviews POST /reviews/request Send review request to customer { \"bookingId\": \"uuid (required)\", \"customerId\": \"uuid (required)\" } 11. Integration Endpoints POST /integrations/google-calendar Connect Google Calendar integration POST /integrations/quickbooks Connect QuickBooks integration GET /integrations/status Get integration status Error Codes Code Description 400 Bad Request - Invalid request data 401 Unauthorized - Invalid or missing token 403 Forbidden - Insufficient permissions 404 Not Found - Resource not found 409 Conflict - Resource already exists 422 Unprocessable Entity - Validation errors 429 Too Many Requests - Rate limit exceeded 500 Internal Server Error Rate Limiting 100 requests per minute for authenticated users 20 requests per minute for public endpoints 1000 requests per hour for dashboard analytics Webhooks Configure webhooks to receive real-time updates: booking.created booking.updated booking.cancelled payment.completed review.received Suggested Improvements 1. Advanced Features AI-powered scheduling optimization : Suggest optimal routes and time slots Automated customer segmentation : Group customers by behavior, value, etc. Dynamic pricing : Adjust prices based on demand, location, time Inventory management : Track cleaning supplies and equipment Employee management : Schedule staff, track performance Multi-location support : Manage multiple business locations 2. Enhanced Customer Experience Real-time tracking : GPS tracking of cleaning teams Photo documentation : Before/after service photos Customer portal : Self-service booking management Loyalty program : Points, rewards, referral bonuses Service customization : Detailed cleaning checklists 3. Business Intelligence Predictive analytics : Forecast demand and revenue Customer lifetime value : Calculate CLV for better decisions Churn prediction : Identify at-risk customers Market analysis : Local competition and pricing insights 4. Technical Enhancements Real-time notifications : WebSocket support for live updates Offline support : PWA capabilities for field workers API versioning : Support multiple API versions GraphQL endpoint : Alternative to REST for complex queries Bulk operations : Import/export customers, bulk updates 5. Integrations Payment processing : Stripe, Square, PayPal SMS service : Twilio for customer communications Email marketing : Mailchimp, Constant Contact Accounting : QuickBooks, Xero integration Background checks : For employee verification Insurance : Liability and bonding verification 6. Security & Compliance Two-factor authentication : Enhanced security GDPR compliance : Data privacy controls PCI compliance : Secure payment handling Audit logs : Track all system changes Role-based permissions : Granular access control","title":"API Documentation"},{"location":"api_doc/#cleaning-service-crm-advertising-api-documentation","text":"","title":"Cleaning Service CRM &amp; Advertising API Documentation"},{"location":"api_doc/#overview","text":"This API serves a web application designed for cleaning service businesses to manage customer relationships, bookings, and advertising campaigns.","title":"Overview"},{"location":"api_doc/#base-url","text":"https://api.cleanbooker.com/v1","title":"Base URL"},{"location":"api_doc/#authentication","text":"All authenticated endpoints require a Bearer token in the Authorization header: Authorization: Bearer <jwt_token>","title":"Authentication"},{"location":"api_doc/#response-format","text":"All responses follow this structure: { \"success\": boolean, \"data\": object | array | null, \"message\": string, \"errors\": array | null, \"meta\": { \"timestamp\": \"ISO 8601 datetime\", \"requestId\": \"unique_request_id\" } }","title":"Response Format"},{"location":"api_doc/#1-authentication-endpoints","text":"","title":"1. Authentication Endpoints"},{"location":"api_doc/#post-authregister","text":"Register a new business account { \"businessName\": \"string (required)\", \"ownerName\": \"string (required)\", \"email\": \"string (required, unique)\", \"password\": \"string (required, min 8 chars)\", \"phone\": \"string (required)\", \"address\": { \"street\": \"string (required)\", \"city\": \"string (required)\", \"state\": \"string (required)\", \"zipCode\": \"string (required)\", \"country\": \"string (default: US)\" }, \"serviceArea\": [\"string\"] // Array of zip codes or city names } Response: { \"success\": true, \"data\": { \"user\": { \"id\": \"uuid\", \"businessName\": \"string\", \"email\": \"string\", \"role\": \"admin\", \"isVerified\": false }, \"token\": \"jwt_token\", \"refreshToken\": \"refresh_token\" } }","title":"POST /auth/register"},{"location":"api_doc/#post-authlogin","text":"Login to existing account { \"email\": \"string (required)\", \"password\": \"string (required)\" }","title":"POST /auth/login"},{"location":"api_doc/#post-authrefresh","text":"Refresh access token { \"refreshToken\": \"string (required)\" }","title":"POST /auth/refresh"},{"location":"api_doc/#post-authlogout","text":"Logout and invalidate tokens { \"refreshToken\": \"string (required)\" }","title":"POST /auth/logout"},{"location":"api_doc/#post-authforgot-password","text":"Request password reset { \"email\": \"string (required)\" }","title":"POST /auth/forgot-password"},{"location":"api_doc/#post-authreset-password","text":"Reset password with token { \"token\": \"string (required)\", \"newPassword\": \"string (required)\" }","title":"POST /auth/reset-password"},{"location":"api_doc/#2-user-management","text":"","title":"2. User Management"},{"location":"api_doc/#get-usersprofile","text":"Get current user profile","title":"GET /users/profile"},{"location":"api_doc/#put-usersprofile","text":"Update user profile { \"businessName\": \"string\", \"ownerName\": \"string\", \"phone\": \"string\", \"address\": { \"street\": \"string\", \"city\": \"string\", \"state\": \"string\", \"zipCode\": \"string\" }, \"serviceArea\": [\"string\"], \"businessHours\": { \"monday\": { \"open\": \"09:00\", \"close\": \"17:00\", \"closed\": false }, \"tuesday\": { \"open\": \"09:00\", \"close\": \"17:00\", \"closed\": false } // ... other days } }","title":"PUT /users/profile"},{"location":"api_doc/#post-usersupload-avatar","text":"Upload business logo/avatar Multipart form data with image file","title":"POST /users/upload-avatar"},{"location":"api_doc/#3-customer-management-crm","text":"","title":"3. Customer Management (CRM)"},{"location":"api_doc/#get-customers","text":"Get customers list with pagination and filters Query Parameters: page : number (default: 1) limit : number (default: 20, max: 100) search : string (search by name, email, phone) status : enum (active, inactive, potential) sortBy : enum (name, email, createdAt, lastService) sortOrder : enum (asc, desc)","title":"GET /customers"},{"location":"api_doc/#post-customers","text":"Create new customer { \"firstName\": \"string (required)\", \"lastName\": \"string (required)\", \"email\": \"string (required)\", \"phone\": \"string (required)\", \"address\": { \"street\": \"string (required)\", \"city\": \"string (required)\", \"state\": \"string (required)\", \"zipCode\": \"string (required)\" }, \"propertyType\": \"enum (house, apartment, office, commercial)\", \"propertySize\": \"number\", // square feet \"specialInstructions\": \"string\", \"preferredContactMethod\": \"enum (email, phone, sms)\", \"status\": \"enum (potential, active, inactive)\" }","title":"POST /customers"},{"location":"api_doc/#get-customersid","text":"Get customer details","title":"GET /customers/:id"},{"location":"api_doc/#put-customersid","text":"Update customer information","title":"PUT /customers/:id"},{"location":"api_doc/#delete-customersid","text":"Delete customer (soft delete)","title":"DELETE /customers/:id"},{"location":"api_doc/#get-customersidbookings","text":"Get customer's booking history","title":"GET /customers/:id/bookings"},{"location":"api_doc/#get-customersidnotes","text":"Get customer notes","title":"GET /customers/:id/notes"},{"location":"api_doc/#post-customersidnotes","text":"Add customer note { \"content\": \"string (required)\", \"type\": \"enum (general, service, complaint, compliment)\" }","title":"POST /customers/:id/notes"},{"location":"api_doc/#4-services-management","text":"","title":"4. Services Management"},{"location":"api_doc/#get-services","text":"Get available services","title":"GET /services"},{"location":"api_doc/#post-services","text":"Create new service { \"name\": \"string (required)\", \"description\": \"string\", \"basePrice\": \"number (required)\", \"duration\": \"number (required)\", // minutes \"category\": \"enum (regular, deep, move-in, move-out, commercial)\", \"addOns\": [ { \"name\": \"string\", \"price\": \"number\", \"duration\": \"number\" } ], \"isActive\": \"boolean (default: true)\" }","title":"POST /services"},{"location":"api_doc/#put-servicesid","text":"Update service","title":"PUT /services/:id"},{"location":"api_doc/#delete-servicesid","text":"Delete service","title":"DELETE /services/:id"},{"location":"api_doc/#5-booking-management","text":"","title":"5. Booking Management"},{"location":"api_doc/#get-bookings","text":"Get bookings with filters Query Parameters: page , limit : pagination status : enum (pending, confirmed, in-progress, completed, cancelled) date : ISO date (filter by specific date) dateRange : object { \"start\": \"ISO date\", \"end\": \"ISO date\" } customerId : uuid serviceId : uuid","title":"GET /bookings"},{"location":"api_doc/#post-bookings","text":"Create new booking { \"customerId\": \"uuid (required)\", \"serviceId\": \"uuid (required)\", \"scheduledDate\": \"ISO datetime (required)\", \"estimatedDuration\": \"number (required)\", // minutes \"address\": { \"street\": \"string (required)\", \"city\": \"string (required)\", \"state\": \"string (required)\", \"zipCode\": \"string (required)\" }, \"addOns\": [\"uuid\"], // array of add-on service IDs \"specialInstructions\": \"string\", \"totalPrice\": \"number (required)\", \"paymentMethod\": \"enum (cash, card, check, online)\", \"recurringType\": \"enum (none, weekly, biweekly, monthly)\", \"recurringEndDate\": \"ISO date\" // if recurring }","title":"POST /bookings"},{"location":"api_doc/#get-bookingsid","text":"Get booking details","title":"GET /bookings/:id"},{"location":"api_doc/#put-bookingsid","text":"Update booking","title":"PUT /bookings/:id"},{"location":"api_doc/#put-bookingsidstatus","text":"Update booking status { \"status\": \"enum (confirmed, in-progress, completed, cancelled)\", \"notes\": \"string\" }","title":"PUT /bookings/:id/status"},{"location":"api_doc/#post-bookingspublic","text":"Public booking endpoint (for website booking form) { \"customer\": { \"firstName\": \"string (required)\", \"lastName\": \"string (required)\", \"email\": \"string (required)\", \"phone\": \"string (required)\", \"address\": { \"street\": \"string (required)\", \"city\": \"string (required)\", \"state\": \"string (required)\", \"zipCode\": \"string (required)\" } }, \"serviceId\": \"uuid (required)\", \"preferredDate\": \"ISO date (required)\", \"preferredTime\": \"string (required)\", // HH:MM format \"alternativeDate\": \"ISO date\", \"alternativeTime\": \"string\", \"addOns\": [\"uuid\"], \"specialInstructions\": \"string\", \"propertyType\": \"enum (house, apartment, office, commercial)\", \"propertySize\": \"number\", \"howDidYouHear\": \"string\" }","title":"POST /bookings/public"},{"location":"api_doc/#6-calendar-scheduling","text":"","title":"6. Calendar &amp; Scheduling"},{"location":"api_doc/#get-calendaravailability","text":"Check availability for booking Query Parameters: date : ISO date (required) serviceId : uuid (required) duration : number (required, in minutes) Response: { \"success\": true, \"data\": { \"availableSlots\": [ { \"startTime\": \"HH:MM\", \"endTime\": \"HH:MM\" } ] } }","title":"GET /calendar/availability"},{"location":"api_doc/#get-calendarevents","text":"Get calendar events for dashboard Query Parameters: start : ISO date end : ISO date","title":"GET /calendar/events"},{"location":"api_doc/#7-analytics-reports","text":"","title":"7. Analytics &amp; Reports"},{"location":"api_doc/#get-analyticsdashboard","text":"Get dashboard analytics { \"period\": \"enum (today, week, month, quarter, year, custom)\", \"startDate\": \"ISO date\", // required if period is custom \"endDate\": \"ISO date\" // required if period is custom } Response: { \"success\": true, \"data\": { \"totalRevenue\": \"number\", \"totalBookings\": \"number\", \"completedServices\": \"number\", \"newCustomers\": \"number\", \"customerRetentionRate\": \"number\", \"averageBookingValue\": \"number\", \"popularServices\": [ { \"serviceId\": \"uuid\", \"serviceName\": \"string\", \"bookingCount\": \"number\", \"revenue\": \"number\" } ], \"revenueByMonth\": [ { \"month\": \"YYYY-MM\", \"revenue\": \"number\", \"bookings\": \"number\" } ], \"bookingStatusBreakdown\": { \"pending\": \"number\", \"confirmed\": \"number\", \"completed\": \"number\", \"cancelled\": \"number\" } } }","title":"GET /analytics/dashboard"},{"location":"api_doc/#get-analyticsrevenue","text":"Get detailed revenue analytics","title":"GET /analytics/revenue"},{"location":"api_doc/#get-analyticscustomers","text":"Get customer analytics","title":"GET /analytics/customers"},{"location":"api_doc/#get-analyticsservices","text":"Get service performance analytics","title":"GET /analytics/services"},{"location":"api_doc/#8-marketing-advertising","text":"","title":"8. Marketing &amp; Advertising"},{"location":"api_doc/#get-marketingcampaigns","text":"Get advertising campaigns","title":"GET /marketing/campaigns"},{"location":"api_doc/#post-marketingcampaigns","text":"Create new campaign { \"name\": \"string (required)\", \"type\": \"enum (google-ads, facebook, email, sms)\", \"budget\": \"number\", \"startDate\": \"ISO date (required)\", \"endDate\": \"ISO date\", \"targetAudience\": { \"ageRange\": { \"min\": \"number\", \"max\": \"number\" }, \"locations\": [\"string\"], \"interests\": [\"string\"] }, \"adContent\": { \"headline\": \"string\", \"description\": \"string\", \"imageUrl\": \"string\", \"callToAction\": \"string\" }, \"isActive\": \"boolean\" }","title":"POST /marketing/campaigns"},{"location":"api_doc/#get-marketingleads","text":"Get marketing leads","title":"GET /marketing/leads"},{"location":"api_doc/#post-marketingleads","text":"Convert lead to customer { \"leadId\": \"uuid (required)\", \"customerId\": \"uuid (required)\" }","title":"POST /marketing/leads"},{"location":"api_doc/#9-notifications","text":"","title":"9. Notifications"},{"location":"api_doc/#get-notifications","text":"Get user notifications","title":"GET /notifications"},{"location":"api_doc/#put-notificationsidread","text":"Mark notification as read","title":"PUT /notifications/:id/read"},{"location":"api_doc/#post-notificationspreferences","text":"Update notification preferences { \"emailNotifications\": { \"newBookings\": \"boolean\", \"cancellations\": \"boolean\", \"payments\": \"boolean\", \"reviews\": \"boolean\" }, \"smsNotifications\": { \"appointmentReminders\": \"boolean\", \"statusUpdates\": \"boolean\" }, \"pushNotifications\": { \"enabled\": \"boolean\" } }","title":"POST /notifications/preferences"},{"location":"api_doc/#10-reviews-feedback","text":"","title":"10. Reviews &amp; Feedback"},{"location":"api_doc/#get-reviews","text":"Get customer reviews","title":"GET /reviews"},{"location":"api_doc/#post-reviewsrequest","text":"Send review request to customer { \"bookingId\": \"uuid (required)\", \"customerId\": \"uuid (required)\" }","title":"POST /reviews/request"},{"location":"api_doc/#11-integration-endpoints","text":"","title":"11. Integration Endpoints"},{"location":"api_doc/#post-integrationsgoogle-calendar","text":"Connect Google Calendar integration","title":"POST /integrations/google-calendar"},{"location":"api_doc/#post-integrationsquickbooks","text":"Connect QuickBooks integration","title":"POST /integrations/quickbooks"},{"location":"api_doc/#get-integrationsstatus","text":"Get integration status","title":"GET /integrations/status"},{"location":"api_doc/#error-codes","text":"Code Description 400 Bad Request - Invalid request data 401 Unauthorized - Invalid or missing token 403 Forbidden - Insufficient permissions 404 Not Found - Resource not found 409 Conflict - Resource already exists 422 Unprocessable Entity - Validation errors 429 Too Many Requests - Rate limit exceeded 500 Internal Server Error","title":"Error Codes"},{"location":"api_doc/#rate-limiting","text":"100 requests per minute for authenticated users 20 requests per minute for public endpoints 1000 requests per hour for dashboard analytics","title":"Rate Limiting"},{"location":"api_doc/#webhooks","text":"Configure webhooks to receive real-time updates: booking.created booking.updated booking.cancelled payment.completed review.received","title":"Webhooks"},{"location":"api_doc/#suggested-improvements","text":"","title":"Suggested Improvements"},{"location":"api_doc/#1-advanced-features","text":"AI-powered scheduling optimization : Suggest optimal routes and time slots Automated customer segmentation : Group customers by behavior, value, etc. Dynamic pricing : Adjust prices based on demand, location, time Inventory management : Track cleaning supplies and equipment Employee management : Schedule staff, track performance Multi-location support : Manage multiple business locations","title":"1. Advanced Features"},{"location":"api_doc/#2-enhanced-customer-experience","text":"Real-time tracking : GPS tracking of cleaning teams Photo documentation : Before/after service photos Customer portal : Self-service booking management Loyalty program : Points, rewards, referral bonuses Service customization : Detailed cleaning checklists","title":"2. Enhanced Customer Experience"},{"location":"api_doc/#3-business-intelligence","text":"Predictive analytics : Forecast demand and revenue Customer lifetime value : Calculate CLV for better decisions Churn prediction : Identify at-risk customers Market analysis : Local competition and pricing insights","title":"3. Business Intelligence"},{"location":"api_doc/#4-technical-enhancements","text":"Real-time notifications : WebSocket support for live updates Offline support : PWA capabilities for field workers API versioning : Support multiple API versions GraphQL endpoint : Alternative to REST for complex queries Bulk operations : Import/export customers, bulk updates","title":"4. Technical Enhancements"},{"location":"api_doc/#5-integrations","text":"Payment processing : Stripe, Square, PayPal SMS service : Twilio for customer communications Email marketing : Mailchimp, Constant Contact Accounting : QuickBooks, Xero integration Background checks : For employee verification Insurance : Liability and bonding verification","title":"5. Integrations"},{"location":"api_doc/#6-security-compliance","text":"Two-factor authentication : Enhanced security GDPR compliance : Data privacy controls PCI compliance : Secure payment handling Audit logs : Track all system changes Role-based permissions : Granular access control","title":"6. Security &amp; Compliance"},{"location":"deployment_inst/","text":"","title":"Deployment Instruction"},{"location":"git_best_practices/","text":"Git Best Practices for Clean Booker Branching Strategy All branches must follow this naming convention: Backend : username/server/short-description Frontend : username/client/short-description Database : username/db/short-description DevOps : username/devops/short-description Documentation : username/docs/short-description Use lowercase letters and hyphens. Avoid spaces and underscores. Examples : safwan/server/add-login-api safwan/client/fix-navbar-style safwan/docs/update-readme Commit Messages Use clear, concise, and descriptive commit messages. Start with an imperative verb: add , fix , update , remove , refactor , etc. Optionally prefix with task ID if linked to a ticket or issue. Limit subject line to 50 characters . Wrap the body at 72 characters if used. Examples : add: implement JWT auth for login API fix: resolve null error in user controller update: change footer background color refactor: split booking component into smaller modules Pull Requests (PR) Open all PRs to the develop branch (unless hotfixes). Squash commits before merging for a clean history: git rebase -i origin/develop Use a descriptive title and body: [123] Add validation to booking form PR Checklist Descriptive title and summary Code reviewed by at least one other person Commits squashed and cleaned No console.log or leftover comments Tests added/updated CI passes General Git Rules Branch Management Never commit directly to main or develop Always create a feature branch from develop Keep local develop up to date: git checkout develop git pull origin develop Do NOT Commit Secrets or .env files IDE configs (.vscode/, .idea/) OS files like .DS_Store Auto-generated files (e.g., dist/, node_modules/)","title":"Git Best Practices"},{"location":"git_best_practices/#git-best-practices-for-clean-booker","text":"","title":"Git Best Practices for Clean Booker"},{"location":"git_best_practices/#branching-strategy","text":"All branches must follow this naming convention: Backend : username/server/short-description Frontend : username/client/short-description Database : username/db/short-description DevOps : username/devops/short-description Documentation : username/docs/short-description Use lowercase letters and hyphens. Avoid spaces and underscores. Examples : safwan/server/add-login-api safwan/client/fix-navbar-style safwan/docs/update-readme","title":"Branching Strategy"},{"location":"git_best_practices/#commit-messages","text":"Use clear, concise, and descriptive commit messages. Start with an imperative verb: add , fix , update , remove , refactor , etc. Optionally prefix with task ID if linked to a ticket or issue. Limit subject line to 50 characters . Wrap the body at 72 characters if used. Examples : add: implement JWT auth for login API fix: resolve null error in user controller update: change footer background color refactor: split booking component into smaller modules","title":"Commit Messages"},{"location":"git_best_practices/#pull-requests-pr","text":"Open all PRs to the develop branch (unless hotfixes). Squash commits before merging for a clean history: git rebase -i origin/develop Use a descriptive title and body: [123] Add validation to booking form PR Checklist Descriptive title and summary Code reviewed by at least one other person Commits squashed and cleaned No console.log or leftover comments Tests added/updated CI passes","title":"Pull Requests (PR)"},{"location":"git_best_practices/#general-git-rules","text":"Branch Management Never commit directly to main or develop Always create a feature branch from develop Keep local develop up to date: git checkout develop git pull origin develop Do NOT Commit Secrets or .env files IDE configs (.vscode/, .idea/) OS files like .DS_Store Auto-generated files (e.g., dist/, node_modules/)","title":"General Git Rules"},{"location":"project_req/","text":"Welcome to Clean Booker For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project Requirements"},{"location":"project_req/#welcome-to-clean-booker","text":"For full documentation visit mkdocs.org .","title":"Welcome to Clean Booker"},{"location":"project_req/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"project_req/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"software_design/","text":"Software Design API Documentation Architecture Diagram Users and admins interact with a React + Vite-based web frontend, which communicates with a Node.js + Express backend via API requests. The backend handles business logic, processes payments through Stripe, and interacts with a PostgreSQL database to manage core entities like users, bookings, services, and admin statistics. This architecture ensures a modular, scalable, and maintainable system optimized for both end-user experience and administrative operations. Techonology Used Backend Node.js + Express + TS express: lightweight web framework cors: enables cross-origin requests from the frontend dotenv: manages environment variables pg: PostgreSQL client nodemon: auto-restarts server during development typescript: TypeScript compiler ts-node-dev: auto-reload during development @types/*: type definitions zod: Zod schemas for request validation hamlet: Helmet for security headers Prisma ORM Auto generates types for your database models Easy to read schema Powerful querying without raw SQL Built in migrations Works perfectly with TypeScript","title":"Software Design"},{"location":"software_design/#software-design","text":"","title":"Software Design"},{"location":"software_design/#api-documentation","text":"","title":"API Documentation"},{"location":"software_design/#architecture-diagram","text":"Users and admins interact with a React + Vite-based web frontend, which communicates with a Node.js + Express backend via API requests. The backend handles business logic, processes payments through Stripe, and interacts with a PostgreSQL database to manage core entities like users, bookings, services, and admin statistics. This architecture ensures a modular, scalable, and maintainable system optimized for both end-user experience and administrative operations.","title":"Architecture Diagram"},{"location":"software_design/#techonology-used","text":"Backend Node.js + Express + TS express: lightweight web framework cors: enables cross-origin requests from the frontend dotenv: manages environment variables pg: PostgreSQL client nodemon: auto-restarts server during development typescript: TypeScript compiler ts-node-dev: auto-reload during development @types/*: type definitions zod: Zod schemas for request validation hamlet: Helmet for security headers Prisma ORM Auto generates types for your database models Easy to read schema Powerful querying without raw SQL Built in migrations Works perfectly with TypeScript","title":"Techonology Used"}]}